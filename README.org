#+title: Org Contacts Extended
#+date: <2022-08-15 Mon>
#+author: Thomas Freeman
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.1 (Org mode 9.5.4)

#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t num:nil


*This package is currently a work in progress and is not ready for daily use.*

Expanding on the power of org-contacts.el. This is a fork of ~org-contacts.el~.

* Purpose

Org Contacts Extended is designed with the following principles in mind:

1. As opposed to storing multiple user addresses and info under a single property, use multiple named properties to store contact information. For example, instead of having multiple email addresses listed under a contact under a single ~:EMAIL:~, store each address under properties such as ~:WORK_EMAI:L~, ~:HOME_EMAIL:~, and ~:OTHER_EMAIL:~, etc. This makes searching for the correct information easier and works well with the Emacs completion system for interactively choosing contact information.
2. Allow the user to expand on the different properties for contact information so there is no limit to how much information can be stored. A user can define more contact information types under general categories using the Emacs ~M-x customize~ interface. For example, the "Address" category could be expanded to contain different types of address properties such as "WORK_ADDRESS", "HOME_ADDRESS", "VACATION_HOME_ADDRESS", and so on. Each property would refer to a single address.
3. Create functions to use contact information outside of Emacs, such as using email software outside of Emacs to compose a message.
   
* Differences Between Org Contacts Extended and Org Contacts

Here is a list of differences between Org Contacts Extended and Org Contacts:

+ Contact information is stored differently from Org Contacts. As opposed to having a single ~:EMAIL:~ that would store multiple email addresses for each contact separated by whitespace, Org Contacts Extended defines a category called "Email" that would store different email addresses under different properties such as ~:WORK_EMAIL:~, ~:PERSONAL_EMAIL:~, or any other property the user wishes to define. Property categories can be assigned to categories using =M-x customize=.
+ *Each property can only contain a single value!* This is a major change from the original Org Contacts. The reason behind this change is so that each property acts as a label for each item of contact information. This allows the user to select emails based on their property name. For example, instead of having to remember which email listed under the ~:EMAIL:~ property corresponds to a contact's work email, the user can search for the ~:WORK_EMAIL:~ property and get the matching address. This can be very useful for contacts that have many different email addresses for different purposes.
+ More types of contact information can be stored compared to the original Org Contacts. These include: anniversaries, messenger accounts, company/employer name, department, job titles, and messenger accounts.
+ Contact information can be copied to the kill ring from any files defined in the variable ~org-contacts-files~ by using =M-x org-contactsx-copy=. Contact information can then be interactively copied to the kill ring with completion.

* Planned Features

- [X] Create customizable listts of properties for contact iformation
- [X] Create a function to interactively copy any contact information of a contact with completion
- [X] Expand the types of contact information to include a contact's anniversaries, company, and job title
- [-] Add support for All The Icons

* Items to Complete

- [ ] Shorten variable names
- [ ] Fix vcard export to support multiple different email, address, and phone properties
- [ ] Ensure that org-contactsx works with a majority of email packages in Emacs including:
  - mu4e
  - Gnus
  - wl
  - notmuch
  - viewmail  

* Tips and Tricks

** Use Consult to Search Contacts

The following function will extend the excellent Consult package to search through headings of your ~org-contacts-files~ to allow for quick interactive searching of contacts. This function will work with both Org Contacts Extended and the orginal Org Contacts.

#+begin_src emacs-lisp :tangle no :noweb-ref org_contacts_preface
  (defun consult-org-contacts (&optional match)
      "Jump to an Org contacts heading using files defined in `org-contacts-files'

    By default, all contacts file entries are offered. MATCH is as in
    `org-map-entries' and can be used to refine this. This function requires that
    the library `org-contacts.el' be installed and the variable `org-contacts-files'
    be set."
      (interactive)
      (unless (or (locate-library "org-contacts")
                  (locate-library "org-contactsx"))
        (user-error "The pacakge org-contacts must be installed to use this function"))
      (unless org-contacts-files
        (user-error "No contacts files defined"))
      (consult-org-heading match org-contacts-files))
#+end_src

** Create Organization Charts

Since Org Contacts Extended uses Org Mode headings, you can place contacts as subheadings underneath other contacts to create an organization heirarchy. To accomplish this, a file from the list of ~org-contacts-files~ that is organized similarly to the example below will work\:

#+begin_src org
  ,* Boss
  :EMAIL: [[mailto:boss@boss.com]]

  ,** Manager
  :EMAIL: [[mailto:manager@boss.com]]

  ,*** Employee
  :EMAIL: [[mailto:employee@boss.com]]
#+end_src

Then, by installing and using packages such as Org Mind Map, you can then generate organizational charts using the above file.
